using Padutronics.Conversion.Converters;
using Padutronics.Gaming.Inputs.Keyboards;
using Padutronics.Windows.Win32.Api.WinUser;
using System;

namespace Padutronics.Gaming.Windows.Conversion.Converters;

public sealed class VKToKeyConverter : IConverter<VK, Key>
{
    public Key Convert(VK value)
    {
        return value switch
        {
            VK.VK_0 => Key.D0,
            VK.VK_1 => Key.D1,
            VK.VK_2 => Key.D2,
            VK.VK_3 => Key.D3,
            VK.VK_4 => Key.D4,
            VK.VK_5 => Key.D5,
            VK.VK_6 => Key.D6,
            VK.VK_7 => Key.D7,
            VK.VK_8 => Key.D8,
            VK.VK_9 => Key.D9,
            VK.VK_A => Key.A,
            VK.VK_ADD => Key.Add,
            VK.VK_B => Key.B,
            VK.VK_BACK => Key.Back,
            VK.VK_C => Key.C,
            VK.VK_CAPITAL => Key.CapsLock,
            VK.VK_D => Key.D,
            VK.VK_DECIMAL => Key.Decimal,
            VK.VK_DELETE => Key.Delete,
            VK.VK_DIVIDE => Key.Divide,
            VK.VK_DOWN => Key.Down,
            VK.VK_E => Key.E,
            VK.VK_END => Key.End,
            VK.VK_ESCAPE => Key.Escape,
            VK.VK_F => Key.F,
            VK.VK_F1 => Key.F1,
            VK.VK_F2 => Key.F2,
            VK.VK_F3 => Key.F3,
            VK.VK_F4 => Key.F4,
            VK.VK_F5 => Key.F5,
            VK.VK_F6 => Key.F6,
            VK.VK_F7 => Key.F7,
            VK.VK_F8 => Key.F8,
            VK.VK_F9 => Key.F9,
            VK.VK_F10 => Key.F10,
            VK.VK_F11 => Key.F11,
            VK.VK_F12 => Key.F12,
            VK.VK_G => Key.G,
            VK.VK_H => Key.H,
            VK.VK_HOME => Key.Home,
            VK.VK_I => Key.I,
            VK.VK_INSERT => Key.Insert,
            VK.VK_J => Key.J,
            VK.VK_K => Key.K,
            VK.VK_L => Key.L,
            VK.VK_LCONTROL => Key.LeftControl,
            VK.VK_LEFT => Key.Left,
            VK.VK_LMENU => Key.LeftMenu,
            VK.VK_LSHIFT => Key.LeftShift,
            VK.VK_LWIN => Key.LeftWindows,
            VK.VK_M => Key.M,
            VK.VK_MULTIPLY => Key.Multiply,
            VK.VK_N => Key.N,
            VK.VK_NEXT => Key.PageDown,
            VK.VK_NUMLOCK => Key.NumLock,
            VK.VK_NUMPAD0 => Key.NumPad0,
            VK.VK_NUMPAD1 => Key.NumPad1,
            VK.VK_NUMPAD2 => Key.NumPad2,
            VK.VK_NUMPAD3 => Key.NumPad3,
            VK.VK_NUMPAD4 => Key.NumPad4,
            VK.VK_NUMPAD5 => Key.NumPad5,
            VK.VK_NUMPAD6 => Key.NumPad6,
            VK.VK_NUMPAD7 => Key.NumPad7,
            VK.VK_NUMPAD8 => Key.NumPad8,
            VK.VK_NUMPAD9 => Key.NumPad9,
            VK.VK_O => Key.O,
            VK.VK_P => Key.P,
            VK.VK_PRIOR => Key.PageUp,
            VK.VK_Q => Key.Q,
            VK.VK_R => Key.R,
            VK.VK_RCONTROL => Key.RightControl,
            VK.VK_RETURN => Key.Enter,
            VK.VK_RIGHT => Key.Right,
            VK.VK_RMENU => Key.RightMenu,
            VK.VK_RSHIFT => Key.RightShift,
            VK.VK_RWIN => Key.RightWindows,
            VK.VK_S => Key.S,
            VK.VK_SCROLL => Key.ScrollLock,
            VK.VK_SNAPSHOT => Key.PrintScreen,
            VK.VK_SPACE => Key.Space,
            VK.VK_SUBTRACT => Key.Subtract,
            VK.VK_T => Key.T,
            VK.VK_TAB => Key.Tab,
            VK.VK_U => Key.U,
            VK.VK_UP => Key.Up,
            VK.VK_V => Key.V,
            VK.VK_W => Key.W,
            VK.VK_X => Key.X,
            VK.VK_Y => Key.Y,
            VK.VK_Z => Key.Z,
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, $"Unable to convert value {value}.")
        };
    }
}